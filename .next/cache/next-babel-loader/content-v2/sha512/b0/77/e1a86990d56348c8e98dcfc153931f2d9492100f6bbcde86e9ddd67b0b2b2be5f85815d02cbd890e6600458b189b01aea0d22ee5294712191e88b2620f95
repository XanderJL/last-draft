{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/alexander/github/XanderJL/last-draft/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/alexander/github/XanderJL/last-draft/pages/stories/index.js\",\n    _this = this;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  *[_type == \\\"post\\\"]{}\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { Box, Container, Text } from \"@chakra-ui/react\";\nimport { groq } from \"next-sanity\";\n\nvar Stories = function Stories(_ref) {\n  var blogData = _ref.blogData,\n      categories = _ref.categories;\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    title: title,\n    children: /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(blogData, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, _this);\n};\n\n_c = Stories;\nvar featuredPostsQuery = groq(_templateObject());\nexport var __N_SSG = true;\nexport default Stories;\n\nvar _c;\n\n$RefreshReg$(_c, \"Stories\");","map":{"version":3,"sources":["/home/alexander/github/XanderJL/last-draft/pages/stories/index.js"],"names":["Box","Container","Text","groq","Stories","blogData","categories","title","JSON","stringify","featuredPostsQuery"],"mappings":";;;;;;;;;;;;;;;;AAAA,SAASA,GAAT,EAAcC,SAAd,EAAyBC,IAAzB,QAAqC,kBAArC;AACA,SAASC,IAAT,QAAqB,aAArB;;AAGA,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAA8B;AAAA,MAA3BC,QAA2B,QAA3BA,QAA2B;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;AAC5C,sBACE,QAAC,MAAD;AAAQ,IAAA,KAAK,EAAEC,KAAf;AAAA,2BACE;AAAA,gBAAMC,IAAI,CAACC,SAAL,CAAeJ,QAAf,EAAyB,IAAzB,EAA+B,CAA/B;AAAN;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAkJD,CAnJD;;KAAMD,O;AA8MN,IAAMM,kBAAkB,GAAGP,IAAH,mBAAxB;;AAWA,eAAeC,OAAf","sourcesContent":["import { Box, Container, Text } from \"@chakra-ui/react\"\nimport { groq } from \"next-sanity\"\nimport { getClient } from \"@lib/sanity/sanity.server\"\n\nconst Stories = ({ blogData, categories }) => {\n  return (\n    <Layout title={title}>\n      <pre>{JSON.stringify(blogData, null, 2)}</pre>\n      {/* <Hero />\n      <Container maxW=\"container.xl\">\n        <BlogTabs />\n        <Box\n          as=\"section\"\n          p={{ base: \"1.25rem\", md: \"2rem 1.25rem 3rem 1.25rem\" }}\n        >\n          <Box>\n            <PortableText blocks={pubBody} />\n          </Box>\n        </Box>\n        <section id=\"recent\" className=\"section-category\">\n          <h2\n            className=\"title is-size-3-desktop is-size-4-mobile is-montserrat is-uppercase has-text-black\"\n            style={{ marginBottom: \"0\" }}\n          >\n            Recent\n          </h2>\n          <hr style={{ margin: \"0.75rem 0\" }} />\n          <div className=\"wrapper-post\" style={{ padding: \"2rem 0\" }}>\n            {latestPosts.edges.map(({ node: post }) => {\n              const {\n                id,\n                title,\n                mainImage,\n                _rawBody,\n                previewCopy,\n                category,\n                slug,\n              } = post\n              const image = mainImage.asset\n              const link = category.parentCategory\n                ? `/stories/${category.parentCategory.slug.current}/${category.slug.current}/${slug.current}`\n                : `/stories/${category.slug.current}/${slug.current}`\n              return (\n                <PostCard key={id} title={title} image={image} link={link}>\n                  {previewCopy\n                    ? previewCopy\n                    : toPlainText(_rawBody).slice(0, 159) + \"...\"}\n                </PostCard>\n              )\n            })}\n          </div>\n        </section>\n        <section id=\"featured\" className=\"section\">\n          <h2\n            className=\"title is-size-3-desktop is-size-4-mobile is-montserrat is-uppercase has-text-black\"\n            style={{ marginBottom: \"0\" }}\n          >\n            Featured\n          </h2>\n          <hr style={{ margin: \"0.75rem 0\" }} />\n          <div className=\"wrapper-post\" style={{ padding: \"2rem 0\" }}>\n            {featuredPosts.featuredPosts.map((post) => {\n              const {\n                id,\n                title,\n                mainImage,\n                _rawBody,\n                previewCopy,\n                category,\n                slug,\n              } = post\n              const image = mainImage.asset\n              const link = category.parentCategory\n                ? `/stories/${category.parentCategory.slug.current}/${category.slug.current}/${slug.current}`\n                : `/stories/${category.slug.current}/${slug.current}`\n              return (\n                <PostCard\n                  key={id}\n                  title={title}\n                  image={image}\n                  link={link}\n                  cardStyle={{ maxWidth: \"420px\" }}\n                >\n                  {previewCopy\n                    ? previewCopy\n                    : toPlainText(_rawBody).slice(0, 159) + \"...\"}\n                </PostCard>\n              )\n            })}\n          </div>\n        </section>\n        {categories.map((category) => {\n          const { id, slug, title, description } = category\n          const link = `/stories/${slug.current}`\n\n          return (\n            <section key={id} id={slug.current} className=\"section-category\">\n              <Link to={\"/stories/\" + slug.current}>\n                <h2 className=\"title is-size-2-desktop is-size-4-mobile is-montserrat is-uppercase has-text-black\">\n                  {title}\n                </h2>\n                <hr />\n              </Link>\n              {description && <Text maxW=\"75ch\">{description}</Text>}\n              <div className=\"wrapper-post\" style={{ padding: \"2rem 0\" }}>\n                {posts.edges\n                  .filter(\n                    ({ node: post }) =>\n                      post.category.slug.current === slug.current\n                  )\n                  .slice(0, 3)\n                  .map(({ node: post }) => {\n                    const {\n                      id,\n                      title,\n                      mainImage,\n                      _rawBody,\n                      previewCopy,\n                      category,\n                      slug,\n                    } = post\n                    const image = mainImage.asset\n                    const link = `/stories/${category.slug.current}/${slug.current}`\n                    return (\n                      <PostCard\n                        key={id}\n                        title={title}\n                        image={image}\n                        link={link}\n                        cardStyle={{ maxWidth: \"420px\" }}\n                      >\n                        {previewCopy\n                          ? previewCopy\n                          : toPlainText(_rawBody).slice(0, 159) + \"...\"}\n                      </PostCard>\n                    )\n                  })}\n              </div>\n              <Link to={link} className=\"button is-size-5\">\n                More Articles &rsaquo;\n              </Link>\n            </section>\n          )\n        })}\n        <section className=\"section\">\n          <SubmitForm />\n        </section>\n      </Container>\n      <OptInModal /> */}\n    </Layout>\n  )\n}\n\nconst blogQuery = groq`\n*[_type == \"blog\"]{\n  title,\n  \"slug\": slug.current,\n  \"heroImage\": heroImage.asset->{\n    metadata,\n    url\n  },\n  publication,\n  categories[]->{\n    _id,\n    \"slug\": slug.current,\n    title,\n    description\n  },\n  featuredPosts[]->{\n    _id,\n    title,\n    \"slug\": slug.current,\n    category->{\n      \"slug\": slug.current,\n      title\n    },\n    body,\n    \"mainImage\": mainImage.asset->{\n      metadata,\n      url\n    }\n  }\n}[0]\n`\n\nconst categoriesQuery = groq`\n  *[_type == \"category\"]{\n    _id,\n    title,\n    \"posts\": *[_type == \"post\" && references(^._id)] | order(publishedAt desc) {\n      _id,\n      publishedAt,\n      \"slug\": slug.current,\n      title,\n      \"mainImage\": mainImage.asset->{\n        metadata,\n        url\n      },\n      previewCopy,\n      body,\n      category->{\n        \"slug\": slug.current\n      },\n      parentCategory->{\n        \"slug\": slug.current\n      }\n    }[0..2]\n  }\n`\n\nconst featuredPostsQuery = groq`\n  *[_type == \"post\"]{}\n`\n\nexport const getStaticProps = async () => {\n  const blogData = await getClient().fetch(blogQuery)\n  const categories = await getClient().fetch(categoriesQuery)\n\n  return { props: { blogData, categories } }\n}\n\nexport default Stories\n"]},"metadata":{},"sourceType":"module"}