{"ast":null,"code":"import { Container, Heading } from \"@chakra-ui/layout\";\nimport BlogTabs from \"@components/BlogTabs\";\nimport PostCard from \"@components/Cards/PostCard\";\nimport SubmitForm from \"@components/Forms/SubmitForm\";\nimport Hero from \"@components/Hero\";\nimport Layout from \"@components/Layout\";\nimport CardGrid from \"@components/Layout/Grids/CardGrid\";\nimport Section from \"@components/Layout/Section\";\nimport { getClient } from \"@lib/sanity/sanity.server\";\nimport { groq } from \"next-sanity\";\nimport toPlainText from \"util/toPlainText\";\n\nconst Category = ({\n  blogData,\n  postsData\n}) => {// const { heroImage, categories } = blogData\n  // const { category, childCategories } = postsData[0]\n  // return (\n  //   <Layout>\n  //     <Hero\n  //       placeholder={heroImage?.metadata?.lqip}\n  //       image={heroImage?.url}\n  //       minH=\"36em\"\n  //     />\n  //     <Container maxW=\"container.xl\">\n  //       <BlogTabs categories={categories} />\n  //       <Section>\n  //         <Heading textTransform=\"uppercase\" pb=\"1.5rem\">\n  //           {category.title}\n  //         </Heading>\n  //         {childCategories ? (\n  //           <Heading>PRINGUS</Heading>\n  //         ) : (\n  //           <CardGrid>\n  //             {postsData.map((post) => {\n  //               const {\n  //                 _id,\n  //                 title,\n  //                 mainImage,\n  //                 slug,\n  //                 category,\n  //                 previewCopy,\n  //                 body,\n  //               } = post\n  //               return (\n  //                 <PostCard\n  //                   key={_id}\n  //                   title={title}\n  //                   placeholder={mainImage?.metadata?.lqip}\n  //                   image={mainImage?.url}\n  //                   link={`/${category?.slug}/${slug}`}\n  //                 >\n  //                   {previewCopy\n  //                     ? previewCopy\n  //                     : toPlainText(body).slice(0, 124) + \"...\"}\n  //                 </PostCard>\n  //               )\n  //             })}\n  //           </CardGrid>\n  //         )}\n  //       </Section>\n  //       <Section>\n  //         <SubmitForm />\n  //       </Section>\n  //     </Container>\n  //   </Layout>\n  // )\n};\n\nconst blogQuery = groq`\n*[_type == \"blog\"]{\n  \"heroImage\": heroImage.asset->{\n    metadata,\n    url\n  },\n  categories[!defined(parentCategory)]->{\n    _id,\n    title,\n    \"slug\": slug.current\n  }\n}[0]\n`;\nconst postsQuery = groq`\n  *[_type == \"post\" && category->slug.current == $category] | order(publishedAt desc) {\n    _id,\n    title,\n    \"slug\": slug.current,\n    category->{\n      \"slug\": slug.current,\n      title\n    },\n    body,\n    \"mainImage\": mainImage.asset->{\n      metadata,\n      url\n    }\n  }\n`;\nexport const getStaticPaths = async () => {\n  const blog = await getClient().fetch(blogQuery);\n  const paths = blog.categories.map(category => ({\n    params: {\n      category: [category.slug]\n    }\n  }));\n  console.log(paths);\n  return {\n    paths,\n    fallback: false\n  };\n};\nexport const getStaticProps = async ({\n  params\n}) => {\n  const blogData = await getClient().fetch(blogQuery);\n  const postsData = await getClient().fetch(postsQuery, {\n    category: params.category\n  });\n  return {\n    props: {\n      blogData,\n      postsData\n    }\n  };\n};\nexport default Category;","map":{"version":3,"sources":["/home/alexander/github/XanderJL/last-draft/pages/stories/[...category].js"],"names":["Container","Heading","BlogTabs","PostCard","SubmitForm","Hero","Layout","CardGrid","Section","getClient","groq","toPlainText","Category","blogData","postsData","blogQuery","postsQuery","getStaticPaths","blog","fetch","paths","categories","map","category","params","slug","console","log","fallback","getStaticProps","props"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,OAApB,QAAmC,mBAAnC;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,QAAP,MAAqB,mCAArB;AACA,OAAOC,OAAP,MAAoB,4BAApB;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,SAASC,IAAT,QAAqB,aAArB;AACA,OAAOC,WAAP,MAAwB,kBAAxB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA6B,CAC5C;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CAtDD;;AAwDA,MAAMC,SAAS,GAAGL,IAAK;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAZA;AAcA,MAAMM,UAAU,GAAGN,IAAK;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAfA;AAiBA,OAAO,MAAMO,cAAc,GAAG,YAAY;AACxC,QAAMC,IAAI,GAAG,MAAMT,SAAS,GAAGU,KAAZ,CAAkBJ,SAAlB,CAAnB;AACA,QAAMK,KAAK,GAAGF,IAAI,CAACG,UAAL,CAAgBC,GAAhB,CAAqBC,QAAD,KAAe;AAC/CC,IAAAA,MAAM,EAAE;AAAED,MAAAA,QAAQ,EAAE,CAACA,QAAQ,CAACE,IAAV;AAAZ;AADuC,GAAf,CAApB,CAAd;AAIAC,EAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AAEA,SAAO;AAAEA,IAAAA,KAAF;AAASQ,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACD,CATM;AAWP,OAAO,MAAMC,cAAc,GAAG,OAAO;AAAEL,EAAAA;AAAF,CAAP,KAAsB;AAClD,QAAMX,QAAQ,GAAG,MAAMJ,SAAS,GAAGU,KAAZ,CAAkBJ,SAAlB,CAAvB;AACA,QAAMD,SAAS,GAAG,MAAML,SAAS,GAAGU,KAAZ,CAAkBH,UAAlB,EAA8B;AACpDO,IAAAA,QAAQ,EAAEC,MAAM,CAACD;AADmC,GAA9B,CAAxB;AAIA,SAAO;AAAEO,IAAAA,KAAK,EAAE;AAAEjB,MAAAA,QAAF;AAAYC,MAAAA;AAAZ;AAAT,GAAP;AACD,CAPM;AASP,eAAeF,QAAf","sourcesContent":["import { Container, Heading } from \"@chakra-ui/layout\"\nimport BlogTabs from \"@components/BlogTabs\"\nimport PostCard from \"@components/Cards/PostCard\"\nimport SubmitForm from \"@components/Forms/SubmitForm\"\nimport Hero from \"@components/Hero\"\nimport Layout from \"@components/Layout\"\nimport CardGrid from \"@components/Layout/Grids/CardGrid\"\nimport Section from \"@components/Layout/Section\"\nimport { getClient } from \"@lib/sanity/sanity.server\"\nimport { groq } from \"next-sanity\"\nimport toPlainText from \"util/toPlainText\"\n\nconst Category = ({ blogData, postsData }) => {\n  // const { heroImage, categories } = blogData\n  // const { category, childCategories } = postsData[0]\n\n  // return (\n  //   <Layout>\n  //     <Hero\n  //       placeholder={heroImage?.metadata?.lqip}\n  //       image={heroImage?.url}\n  //       minH=\"36em\"\n  //     />\n  //     <Container maxW=\"container.xl\">\n  //       <BlogTabs categories={categories} />\n  //       <Section>\n  //         <Heading textTransform=\"uppercase\" pb=\"1.5rem\">\n  //           {category.title}\n  //         </Heading>\n  //         {childCategories ? (\n  //           <Heading>PRINGUS</Heading>\n  //         ) : (\n  //           <CardGrid>\n  //             {postsData.map((post) => {\n  //               const {\n  //                 _id,\n  //                 title,\n  //                 mainImage,\n  //                 slug,\n  //                 category,\n  //                 previewCopy,\n  //                 body,\n  //               } = post\n  //               return (\n  //                 <PostCard\n  //                   key={_id}\n  //                   title={title}\n  //                   placeholder={mainImage?.metadata?.lqip}\n  //                   image={mainImage?.url}\n  //                   link={`/${category?.slug}/${slug}`}\n  //                 >\n  //                   {previewCopy\n  //                     ? previewCopy\n  //                     : toPlainText(body).slice(0, 124) + \"...\"}\n  //                 </PostCard>\n  //               )\n  //             })}\n  //           </CardGrid>\n  //         )}\n  //       </Section>\n  //       <Section>\n  //         <SubmitForm />\n  //       </Section>\n  //     </Container>\n  //   </Layout>\n  // )\n}\n\nconst blogQuery = groq`\n*[_type == \"blog\"]{\n  \"heroImage\": heroImage.asset->{\n    metadata,\n    url\n  },\n  categories[!defined(parentCategory)]->{\n    _id,\n    title,\n    \"slug\": slug.current\n  }\n}[0]\n`\n\nconst postsQuery = groq`\n  *[_type == \"post\" && category->slug.current == $category] | order(publishedAt desc) {\n    _id,\n    title,\n    \"slug\": slug.current,\n    category->{\n      \"slug\": slug.current,\n      title\n    },\n    body,\n    \"mainImage\": mainImage.asset->{\n      metadata,\n      url\n    }\n  }\n`\n\nexport const getStaticPaths = async () => {\n  const blog = await getClient().fetch(blogQuery)\n  const paths = blog.categories.map((category) => ({\n    params: { category: [category.slug] },\n  }))\n\n  console.log(paths)\n\n  return { paths, fallback: false }\n}\n\nexport const getStaticProps = async ({ params }) => {\n  const blogData = await getClient().fetch(blogQuery)\n  const postsData = await getClient().fetch(postsQuery, {\n    category: params.category,\n  })\n\n  return { props: { blogData, postsData } }\n}\n\nexport default Category\n"]},"metadata":{},"sourceType":"module"}