{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/alexander/github/XanderJL/last-draft/pages/stories/[category]/[post].js\";\nimport { Heading } from \"@chakra-ui/layout\";\nimport Layout from \"@components/Layout\";\nimport { getClient } from \"@lib/sanity/sanity.server\";\nimport { groq } from \"next-sanity\";\n\nconst Post = ({\n  postData\n}) => {\n  const {\n    title,\n    author\n  } = postData;\n  console.log({\n    author\n  });\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(Heading, {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n\nconst postQuery = groq`\n  *[_type == \"post\" && slug.current == $post]{\n    _id,\n    title,\n    author->{\n      \"slug\": slug.current,\n      name,\n      \"image\": image.asset->{\n        metadata,\n        url\n      },\n      bio\n    },\n    tags,\n    title,\n    publishedAt,\n    \"mainImage\": mainImage.asset->{\n      metadata,\n      url\n    },\n    mainAlt,\n    mainCaption,\n    body\n  }[0]\n`;\nexport const getStaticPaths = async () => {\n  const posts = await getClient().fetch(groq`\n    *[_type == \"post\"]{\n      \"slug\": slug.current,\n      category->{\n        \"slug\": slug.current\n      }\n    }\n  `);\n  const paths = posts.map(post => ({\n    params: {\n      category: post.category.slug,\n      post: post.slug\n    }\n  }));\n  return {\n    paths,\n    fallback: false\n  };\n};\nexport const getStaticProps = async ({\n  params\n}) => {\n  const postData = await getClient().fetch(postQuery, {\n    post: params.post\n  });\n  return {\n    props: {\n      postData\n    }\n  };\n};\nexport default Post;","map":{"version":3,"sources":["/home/alexander/github/XanderJL/last-draft/pages/stories/[category]/[post].js"],"names":["Heading","Layout","getClient","groq","Post","postData","title","author","console","log","postQuery","getStaticPaths","posts","fetch","paths","map","post","params","category","slug","fallback","getStaticProps","props"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,mBAAxB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,SAASC,IAAT,QAAqB,aAArB;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC7B,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAoBF,QAA1B;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEF,IAAAA;AAAF,GAAZ;AACA,sBACE,QAAC,MAAD;AAAA,2BACE,QAAC,OAAD;AAAA,gBAAUD;AAAV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CARD;;AAUA,MAAMI,SAAS,GAAGP,IAAK;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAxBA;AA0BA,OAAO,MAAMQ,cAAc,GAAG,YAAY;AACxC,QAAMC,KAAK,GAAG,MAAMV,SAAS,GAAGW,KAAZ,CAAkBV,IAAK;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,GAPsB,CAApB;AAQA,QAAMW,KAAK,GAAGF,KAAK,CAACG,GAAN,CAAWC,IAAD,KAAW;AACjCC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,QAAQ,EAAEF,IAAI,CAACE,QAAL,CAAcC,IAA1B;AAAgCH,MAAAA,IAAI,EAAEA,IAAI,CAACG;AAA3C;AADyB,GAAX,CAAV,CAAd;AAIA,SAAO;AAAEL,IAAAA,KAAF;AAASM,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACD,CAdM;AAgBP,OAAO,MAAMC,cAAc,GAAG,OAAO;AAAEJ,EAAAA;AAAF,CAAP,KAAsB;AAClD,QAAMZ,QAAQ,GAAG,MAAMH,SAAS,GAAGW,KAAZ,CAAkBH,SAAlB,EAA6B;AAClDM,IAAAA,IAAI,EAAEC,MAAM,CAACD;AADqC,GAA7B,CAAvB;AAIA,SAAO;AAAEM,IAAAA,KAAK,EAAE;AAAEjB,MAAAA;AAAF;AAAT,GAAP;AACD,CANM;AAQP,eAAeD,IAAf","sourcesContent":["import { Heading } from \"@chakra-ui/layout\"\nimport Layout from \"@components/Layout\"\nimport { getClient } from \"@lib/sanity/sanity.server\"\nimport { groq } from \"next-sanity\"\n\nconst Post = ({ postData }) => {\n  const { title, author } = postData\n  console.log({ author })\n  return (\n    <Layout>\n      <Heading>{title}</Heading>\n    </Layout>\n  )\n}\n\nconst postQuery = groq`\n  *[_type == \"post\" && slug.current == $post]{\n    _id,\n    title,\n    author->{\n      \"slug\": slug.current,\n      name,\n      \"image\": image.asset->{\n        metadata,\n        url\n      },\n      bio\n    },\n    tags,\n    title,\n    publishedAt,\n    \"mainImage\": mainImage.asset->{\n      metadata,\n      url\n    },\n    mainAlt,\n    mainCaption,\n    body\n  }[0]\n`\n\nexport const getStaticPaths = async () => {\n  const posts = await getClient().fetch(groq`\n    *[_type == \"post\"]{\n      \"slug\": slug.current,\n      category->{\n        \"slug\": slug.current\n      }\n    }\n  `)\n  const paths = posts.map((post) => ({\n    params: { category: post.category.slug, post: post.slug },\n  }))\n\n  return { paths, fallback: false }\n}\n\nexport const getStaticProps = async ({ params }) => {\n  const postData = await getClient().fetch(postQuery, {\n    post: params.post,\n  })\n\n  return { props: { postData } }\n}\n\nexport default Post\n"]},"metadata":{},"sourceType":"module"}