{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/alexander/github/XanderJL/last-draft/pages/about.js\";\nimport { Container, Image } from \"@chakra-ui/react\";\nimport Brands from \"@components/Brands\";\nimport HeroCard from \"@components/Cards/HeroCard\";\nimport Hero from \"@components/Hero\";\nimport Layout from \"@components/Layout\";\nimport Section from \"@components/Section\";\nimport { PortableText } from \"@lib/sanity\";\nimport { getClient } from \"@lib/sanity/sanity.server\";\nimport { groq } from \"next-sanity\";\n\nconst About = ({\n  data\n}) => {\n  var _heroImage$metadata, _sectionOne$image;\n\n  const {\n    heroImage,\n    heroCard,\n    sectionOne,\n    brands\n  } = data;\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(Hero, {\n      placeholder: heroImage === null || heroImage === void 0 ? void 0 : (_heroImage$metadata = heroImage.metadata) === null || _heroImage$metadata === void 0 ? void 0 : _heroImage$metadata.lqip,\n      image: heroImage === null || heroImage === void 0 ? void 0 : heroImage.url,\n      children: /*#__PURE__*/_jsxDEV(HeroCard, {\n        children: /*#__PURE__*/_jsxDEV(PortableText, {\n          blocks: heroCard\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxW: \"container.xl\",\n      children: [/*#__PURE__*/_jsxDEV(Section, {\n        display: \"flex\",\n        flexDirection: {\n          base: \"column\",\n          md: \"row\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(PortableText, {\n          blocks: sectionOne === null || sectionOne === void 0 ? void 0 : sectionOne.body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Image, {\n          src: sectionOne === null || sectionOne === void 0 ? void 0 : (_sectionOne$image = sectionOne.image) === null || _sectionOne$image === void 0 ? void 0 : _sectionOne$image.url,\n          pl: 8\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Section, {\n        children: /*#__PURE__*/_jsxDEV(Brands, {\n          brands: brands\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n\nconst aboutPageQuery = groq`\n  *[_type == \"aboutPage\"]{\n    metaDescription,\n    title,\n    heroCard,\n    \"heroImage\": heroImage.asset->{\n      metadata,\n      url\n    },\n    sectionOne{\n      body,\n      \"image\": image.asset->{\n        metadata,\n        url\n      }\n    },\n    brands[]->{\n          _id,\n          alt,\n          brandName,\n          brandUrl,\n          \"logo\": logo.asset->{\n             metadata,\n              url\n          }\n        },\n    publication,\n    posts[]{\n      _id,\n      \"slug\": slug.current,\n      category->{\n        \"slug\": slug.current,\n      },\n      title,\n      body,\n      previewCopy,\n      \"mainImage\": mainImage.asset->{\n        metadata,\n        url\n      },\n      mainAlt,\n    }\n  }[0]\n`;\nexport const getStaticProps = async () => {\n  const data = await getClient().fetch(aboutPageQuery);\n  return {\n    props: {\n      data\n    }\n  };\n};\nexport default About; // const About = ({ data }) => {\n//   const CardRenderer = (props) => {\n//     const { style = \"normal\" } = props.node\n//     if (style === \"h1\") {\n//       return (\n//         <Heading\n//           textTransform=\"uppercase\"\n//           letterSpacing=\"0.2rem\"\n//           fontSize={{ base: \"2xl\", md: \"4xl\" }}\n//           fontWeight={400}\n//           pb=\"1rem\"\n//         >\n//           {props.children}\n//         </Heading>\n//       )\n//     }\n//     if (style === \"h2\") {\n//       return (\n//         <Heading\n//           as=\"h2\"\n//           textTransform=\"uppercase\"\n//           letterSpacing=\"0.2rem\"\n//           fontSize={{ base: \"xl\", md: \"2xl\" }}\n//           fontWeight={400}\n//           pb=\"1rem\"\n//         >\n//           {props.children}\n//         </Heading>\n//       )\n//     }\n//     if (style === \"blockquote\") {\n//       return <blockquote>- {props.children}</blockquote>\n//     }\n//     return <Text pb=\"1rem\">{props.children}</Text>\n//   }\n//   const SectionRenderer = (props) => {\n//     const { style = \"normal\" } = props.node\n//     if (/^h\\d/.test(style)) {\n//       return React.createElement(\n//         style,\n//         {\n//           className: `title is-montserrat is-uppercase has-text-black is-size-4-mobile`,\n//         },\n//         props.children\n//       )\n//     }\n//     if (style === \"blockquote\") {\n//       return <blockquote>- {props.children}</blockquote>\n//     }\n//     // Fall back to default handling\n//     return PortableText.defaultSerializers.types.block(props)\n//   }\n//   const BlockImageRenderer = (props) => {\n//     const urlFor = (source) =>\n//       imageUrlBuilder({\n//         projectId: process.env.GATSBY_SANITY_ID,\n//         dataset: process.env.GATSBY_SANITY_DATASET,\n//       }).image(source)\n//     return (\n//       <Link\n//         as={GatsbyLink}\n//         role=\"button\"\n//         to=\"/stories\"\n//         target=\"_blank\"\n//         rel=\"noopener noreferrer\"\n//       >\n//         <img\n//           src={urlFor(props.node.image.asset).maxWidth(400)}\n//           alt={props.node.alt}\n//         />\n//       </Link>\n//     )\n//   }\n//   const { title, posts, heroImage, _rawHeroCard } = data.aboutPage\n//   const metaDescription = data.aboutPage._rawMetaDescription[0].children[0].text\n//   const sectionOne = data.aboutPage._rawSectionOne.body\n//   const sectionOneImg = data.aboutPage.sectionOne.image.asset\n//   const sectionOneAlt = data.aboutPage.sectionOne.alt\n//   const publication = data.aboutPage._rawPublication.body\n//   const pubImage = data.aboutPage.publication.image.asset\n//   const pubAlt = data.aboutPage.publication.alt\n//   return (\n//     <Layout title={title} description={metaDescription}>\n//       <Hero\n//         image={getGatsbyImageData(\n//           heroImage.asset,\n//           { maxWidth: 1440 },\n//           sanityConfig\n//         )}\n//         styles={imageHotspot(heroImage.hotspot)}\n//         size=\"fullheight-with-navbar\"\n//       >\n//         <Box\n//           bg=\"white\"\n//           color=\"black\"\n//           p={{ base: \"2rem 1.25rem\", md: \"4rem 2rem\" }}\n//           maxW=\"55ch\"\n//           m={{ base: 0, md: \"0 auto\" }}\n//           borderRadius={4}\n//           boxShadow=\"lg\"\n//         >\n//           <PortableText\n//             blocks={_rawHeroCard}\n//             serializers={{ types: { block: CardRenderer } }}\n//           />\n//         </Box>\n//       </Hero>\n//       <section className=\"section-storytelling\">\n//         <div className=\"container\">\n//           <div className=\"copy\">\n//             <div className=\"content\">\n//               <PortableText\n//                 blocks={sectionOne}\n//                 serializers={{ types: { block: SectionRenderer } }}\n//               />\n//             </div>\n//           </div>\n//           <SanityImage\n//             image={sectionOneImg}\n//             options={{ maxWidth: 1440 }}\n//             alt={sectionOneAlt || \"\"}\n//             className=\"type-writer\"\n//           />\n//         </div>\n//       </section>\n//       {posts.length > 0 && (\n//         <section className=\"section\">\n//           <Container className=\"container\">\n//             <Grid\n//               templateColumns={{\n//                 base: \"minmax(0, 1fr)\",\n//                 md: \"repeat(auto-fill, minmax(325px, 1fr))\",\n//               }}\n//               gap={8}\n//             >\n//               {posts.map((post) => {\n//                 const {\n//                   id,\n//                   slug,\n//                   category,\n//                   title,\n//                   previewCopy,\n//                   _rawBody,\n//                   mainImage,\n//                 } = post\n//                 return (\n//                   <PostCard\n//                     key={id}\n//                     title={title}\n//                     image={mainImage.asset}\n//                     link={`/stories/${category.slug.current}/${slug.current}`}\n//                   >\n//                     {previewCopy\n//                       ? previewCopy\n//                       : toPlainText(_rawBody).slice(0, 159) + \"...\"}\n//                   </PostCard>\n//                 )\n//               })}\n//             </Grid>\n//           </Container>\n//         </section>\n//       )}\n//       <Brands />\n//       {/* <Box as=\"section\" className=\"section-publication\">\n//         <Box className=\"container\">\n//           <Box className=\"card-publication\">\n//             <Box className=\"card-content\">\n//               <Box className=\"content\">\n//                 <PortableText\n//                   blocks={publication}\n//                   serializers={{\n//                     types: {\n//                       block: SectionRenderer,\n//                       blockImage: BlockImageRenderer,\n//                     },\n//                   }}\n//                 />\n//                 <Box mt=\"2rem\">\n//                   <Link\n//                     as={GatsbyLink}\n//                     role=\"button\"\n//                     to=\"/stories\"\n//                     color=\"white\"\n//                     className=\"button is-solid is-montserrat is-uppercase\"\n//                   >\n//                     stories &rang;\n//                   </Link>\n//                 </Box>\n//               </Box>\n//               <SanityImage\n//                 image={pubImage}\n//                 options={{ maxWidth: 1200 }}\n//                 alt={pubAlt}\n//                 className=\"image\"\n//               />\n//             </Box>\n//           </Box>\n//         </Box>\n//       </Box> */}\n//     </Layout>\n//   )\n// }\n// export const data = graphql`\n//   {\n//     aboutPage: sanityAboutPage {\n//       _rawMetaDescription\n//       title\n//       _rawHeroCard\n//       heroImage {\n//         asset {\n//           _id\n//           url\n//         }\n//         hotspot {\n//           x\n//           y\n//         }\n//       }\n//       _rawSectionOne\n//       _rawPublication\n//       sectionOne {\n//         image {\n//           asset {\n//             _id\n//             url\n//           }\n//         }\n//       }\n//       posts {\n//         id\n//         slug {\n//           current\n//         }\n//         category {\n//           slug {\n//             current\n//           }\n//         }\n//         title\n//         _rawBody\n//         previewCopy\n//         mainImage {\n//           asset {\n//             _id\n//             url\n//           }\n//         }\n//         mainAlt\n//       }\n//       publication {\n//         image {\n//           asset {\n//             _id\n//             url\n//           }\n//         }\n//         alt\n//       }\n//     }\n//   }\n// `\n// export default About","map":{"version":3,"sources":["/home/alexander/github/XanderJL/last-draft/pages/about.js"],"names":["Container","Image","Brands","HeroCard","Hero","Layout","Section","PortableText","getClient","groq","About","data","heroImage","heroCard","sectionOne","brands","metadata","lqip","url","base","md","body","image","aboutPageQuery","getStaticProps","fetch","props"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,KAApB,QAAiC,kBAAjC;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,SAASC,YAAT,QAA6B,aAA7B;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,SAASC,IAAT,QAAqB,aAArB;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAAA;;AAC1B,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,QAAb;AAAuBC,IAAAA,UAAvB;AAAmCC,IAAAA;AAAnC,MAA8CJ,IAApD;AAEA,sBACE,QAAC,MAAD;AAAA,4BACE,QAAC,IAAD;AAAM,MAAA,WAAW,EAAEC,SAAF,aAAEA,SAAF,8CAAEA,SAAS,CAAEI,QAAb,wDAAE,oBAAqBC,IAAxC;AAA8C,MAAA,KAAK,EAAEL,SAAF,aAAEA,SAAF,uBAAEA,SAAS,CAAEM,GAAhE;AAAA,6BACE,QAAC,QAAD;AAAA,+BACE,QAAC,YAAD;AAAc,UAAA,MAAM,EAAEL;AAAtB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAME,QAAC,SAAD;AAAW,MAAA,IAAI,EAAC,cAAhB;AAAA,8BACE,QAAC,OAAD;AAAS,QAAA,OAAO,EAAC,MAAjB;AAAwB,QAAA,aAAa,EAAE;AAAEM,UAAAA,IAAI,EAAE,QAAR;AAAkBC,UAAAA,EAAE,EAAE;AAAtB,SAAvC;AAAA,gCACE,QAAC,YAAD;AAAc,UAAA,MAAM,EAAEN,UAAF,aAAEA,UAAF,uBAAEA,UAAU,CAAEO;AAAlC;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,KAAD;AAAO,UAAA,GAAG,EAAEP,UAAF,aAAEA,UAAF,4CAAEA,UAAU,CAAEQ,KAAd,sDAAE,kBAAmBJ,GAA/B;AAAoC,UAAA,EAAE,EAAE;AAAxC;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE,QAAC,OAAD;AAAA,+BACE,QAAC,MAAD;AAAQ,UAAA,MAAM,EAAEH;AAAhB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CArBD;;AAuBA,MAAMQ,cAAc,GAAGd,IAAK;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA3CA;AA6CA,OAAO,MAAMe,cAAc,GAAG,YAAY;AACxC,QAAMb,IAAI,GAAG,MAAMH,SAAS,GAAGiB,KAAZ,CAAkBF,cAAlB,CAAnB;AACA,SAAO;AAAEG,IAAAA,KAAK,EAAE;AAAEf,MAAAA;AAAF;AAAT,GAAP;AACD,CAHM;AAKP,eAAeD,KAAfsourcesContent":["import { Container, Image } from \"@chakra-ui/react\"\nimport Brands from \"@components/Brands\"\nimport HeroCard from \"@components/Cards/HeroCard\"\nimport Hero from \"@components/Hero\"\nimport Layout from \"@components/Layout\"\nimport Section from \"@components/Section\"\nimport { PortableText } from \"@lib/sanity\"\nimport { getClient } from \"@lib/sanity/sanity.server\"\nimport { groq } from \"next-sanity\"\n\nconst About = ({ data }) => {\n  const { heroImage, heroCard, sectionOne, brands } = data\n\n  return (\n    <Layout>\n      <Hero placeholder={heroImage?.metadata?.lqip} image={heroImage?.url}>\n        <HeroCard>\n          <PortableText blocks={heroCard} />\n        </HeroCard>\n      </Hero>\n      <Container maxW=\"container.xl\">\n        <Section display=\"flex\" flexDirection={{ base: \"column\", md: \"row\" }}>\n          <PortableText blocks={sectionOne?.body} />\n          <Image src={sectionOne?.image?.url} pl={8} />\n        </Section>\n        <Section>\n          <Brands brands={brands} />\n        </Section>\n      </Container>\n    </Layout>\n  )\n}\n\nconst aboutPageQuery = groq`\n  *[_type == \"aboutPage\"]{\n    metaDescription,\n    title,\n    heroCard,\n    \"heroImage\": heroImage.asset->{\n      metadata,\n      url\n    },\n    sectionOne{\n      body,\n      \"image\": image.asset->{\n        metadata,\n        url\n      }\n    },\n    brands[]->{\n          _id,\n          alt,\n          brandName,\n          brandUrl,\n          \"logo\": logo.asset->{\n             metadata,\n              url\n          }\n        },\n    publication,\n    posts[]{\n      _id,\n      \"slug\": slug.current,\n      category->{\n        \"slug\": slug.current,\n      },\n      title,\n      body,\n      previewCopy,\n      \"mainImage\": mainImage.asset->{\n        metadata,\n        url\n      },\n      mainAlt,\n    }\n  }[0]\n`\n\nexport const getStaticProps = async () => {\n  const data = await getClient().fetch(aboutPageQuery)\n  return { props: { data } }\n}\n\nexport default About\n\n// const About = ({ data }) => {\n//   const CardRenderer = (props) => {\n//     const { style = \"normal\" } = props.node\n\n//     if (style === \"h1\") {\n//       return (\n//         <Heading\n//           textTransform=\"uppercase\"\n//           letterSpacing=\"0.2rem\"\n//           fontSize={{ base: \"2xl\", md: \"4xl\" }}\n//           fontWeight={400}\n//           pb=\"1rem\"\n//         >\n//           {props.children}\n//         </Heading>\n//       )\n//     }\n//     if (style === \"h2\") {\n//       return (\n//         <Heading\n//           as=\"h2\"\n//           textTransform=\"uppercase\"\n//           letterSpacing=\"0.2rem\"\n//           fontSize={{ base: \"xl\", md: \"2xl\" }}\n//           fontWeight={400}\n//           pb=\"1rem\"\n//         >\n//           {props.children}\n//         </Heading>\n//       )\n//     }\n\n//     if (style === \"blockquote\") {\n//       return <blockquote>- {props.children}</blockquote>\n//     }\n\n//     return <Text pb=\"1rem\">{props.children}</Text>\n//   }\n\n//   const SectionRenderer = (props) => {\n//     const { style = \"normal\" } = props.node\n\n//     if (/^h\\d/.test(style)) {\n//       return React.createElement(\n//         style,\n//         {\n//           className: `title is-montserrat is-uppercase has-text-black is-size-4-mobile`,\n//         },\n//         props.children\n//       )\n//     }\n\n//     if (style === \"blockquote\") {\n//       return <blockquote>- {props.children}</blockquote>\n//     }\n\n//     // Fall back to default handling\n//     return PortableText.defaultSerializers.types.block(props)\n//   }\n//   const BlockImageRenderer = (props) => {\n//     const urlFor = (source) =>\n//       imageUrlBuilder({\n//         projectId: process.env.GATSBY_SANITY_ID,\n//         dataset: process.env.GATSBY_SANITY_DATASET,\n//       }).image(source)\n//     return (\n//       <Link\n//         as={GatsbyLink}\n//         role=\"button\"\n//         to=\"/stories\"\n//         target=\"_blank\"\n//         rel=\"noopener noreferrer\"\n//       >\n//         <img\n//           src={urlFor(props.node.image.asset).maxWidth(400)}\n//           alt={props.node.alt}\n//         />\n//       </Link>\n//     )\n//   }\n\n//   const { title, posts, heroImage, _rawHeroCard } = data.aboutPage\n//   const metaDescription = data.aboutPage._rawMetaDescription[0].children[0].text\n//   const sectionOne = data.aboutPage._rawSectionOne.body\n//   const sectionOneImg = data.aboutPage.sectionOne.image.asset\n//   const sectionOneAlt = data.aboutPage.sectionOne.alt\n//   const publication = data.aboutPage._rawPublication.body\n//   const pubImage = data.aboutPage.publication.image.asset\n//   const pubAlt = data.aboutPage.publication.alt\n\n//   return (\n//     <Layout title={title} description={metaDescription}>\n//       <Hero\n//         image={getGatsbyImageData(\n//           heroImage.asset,\n//           { maxWidth: 1440 },\n//           sanityConfig\n//         )}\n//         styles={imageHotspot(heroImage.hotspot)}\n//         size=\"fullheight-with-navbar\"\n//       >\n//         <Box\n//           bg=\"white\"\n//           color=\"black\"\n//           p={{ base: \"2rem 1.25rem\", md: \"4rem 2rem\" }}\n//           maxW=\"55ch\"\n//           m={{ base: 0, md: \"0 auto\" }}\n//           borderRadius={4}\n//           boxShadow=\"lg\"\n//         >\n//           <PortableText\n//             blocks={_rawHeroCard}\n//             serializers={{ types: { block: CardRenderer } }}\n//           />\n//         </Box>\n//       </Hero>\n//       <section className=\"section-storytelling\">\n//         <div className=\"container\">\n//           <div className=\"copy\">\n//             <div className=\"content\">\n//               <PortableText\n//                 blocks={sectionOne}\n//                 serializers={{ types: { block: SectionRenderer } }}\n//               />\n//             </div>\n//           </div>\n//           <SanityImage\n//             image={sectionOneImg}\n//             options={{ maxWidth: 1440 }}\n//             alt={sectionOneAlt || \"\"}\n//             className=\"type-writer\"\n//           />\n//         </div>\n//       </section>\n//       {posts.length > 0 && (\n//         <section className=\"section\">\n//           <Container className=\"container\">\n//             <Grid\n//               templateColumns={{\n//                 base: \"minmax(0, 1fr)\",\n//                 md: \"repeat(auto-fill, minmax(325px, 1fr))\",\n//               }}\n//               gap={8}\n//             >\n//               {posts.map((post) => {\n//                 const {\n//                   id,\n//                   slug,\n//                   category,\n//                   title,\n//                   previewCopy,\n//                   _rawBody,\n//                   mainImage,\n//                 } = post\n//                 return (\n//                   <PostCard\n//                     key={id}\n//                     title={title}\n//                     image={mainImage.asset}\n//                     link={`/stories/${category.slug.current}/${slug.current}`}\n//                   >\n//                     {previewCopy\n//                       ? previewCopy\n//                       : toPlainText(_rawBody).slice(0, 159) + \"...\"}\n//                   </PostCard>\n//                 )\n//               })}\n//             </Grid>\n//           </Container>\n//         </section>\n//       )}\n//       <Brands />\n//       {/* <Box as=\"section\" className=\"section-publication\">\n//         <Box className=\"container\">\n//           <Box className=\"card-publication\">\n//             <Box className=\"card-content\">\n//               <Box className=\"content\">\n//                 <PortableText\n//                   blocks={publication}\n//                   serializers={{\n//                     types: {\n//                       block: SectionRenderer,\n//                       blockImage: BlockImageRenderer,\n//                     },\n//                   }}\n//                 />\n//                 <Box mt=\"2rem\">\n//                   <Link\n//                     as={GatsbyLink}\n//                     role=\"button\"\n//                     to=\"/stories\"\n//                     color=\"white\"\n//                     className=\"button is-solid is-montserrat is-uppercase\"\n//                   >\n//                     stories &rang;\n//                   </Link>\n//                 </Box>\n//               </Box>\n//               <SanityImage\n//                 image={pubImage}\n//                 options={{ maxWidth: 1200 }}\n//                 alt={pubAlt}\n//                 className=\"image\"\n//               />\n//             </Box>\n//           </Box>\n//         </Box>\n//       </Box> */}\n//     </Layout>\n//   )\n// }\n\n// export const data = graphql`\n//   {\n//     aboutPage: sanityAboutPage {\n//       _rawMetaDescription\n//       title\n//       _rawHeroCard\n//       heroImage {\n//         asset {\n//           _id\n//           url\n//         }\n//         hotspot {\n//           x\n//           y\n//         }\n//       }\n//       _rawSectionOne\n//       _rawPublication\n//       sectionOne {\n//         image {\n//           asset {\n//             _id\n//             url\n//           }\n//         }\n//       }\n//       posts {\n//         id\n//         slug {\n//           current\n//         }\n//         category {\n//           slug {\n//             current\n//           }\n//         }\n//         title\n//         _rawBody\n//         previewCopy\n//         mainImage {\n//           asset {\n//             _id\n//             url\n//           }\n//         }\n//         mainAlt\n//       }\n//       publication {\n//         image {\n//           asset {\n//             _id\n//             url\n//           }\n//         }\n//         alt\n//       }\n//     }\n//   }\n// `\n\n// export default About\n"]},"metadata":{},"sourceType":"module"}