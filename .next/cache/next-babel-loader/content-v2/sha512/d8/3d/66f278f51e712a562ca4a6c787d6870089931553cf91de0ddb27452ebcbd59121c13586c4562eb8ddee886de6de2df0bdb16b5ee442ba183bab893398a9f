{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/alexander/github/XanderJL/last-draft/pages/services.js\";\nimport Layout from \"@components/Layout\";\nimport { groq } from \"next-sanity\";\nimport { getClient } from \"@lib/sanity.server\";\nimport Hero from \"@components/Hero\";\nimport { PortableText } from \"@lib/sanity\";\nimport { Box, Container, Flex, VStack } from \"@chakra-ui/layout\";\nimport Section from \"@components/Section\";\nimport { Image } from \"@chakra-ui/image\";\n\nconst ForBusiness = ({\n  data\n}) => {\n  var _heroImage$metadata;\n\n  const {\n    title,\n    heroImage,\n    heroCard,\n    services\n  } = data; // const CardRenderer = (props) => {\n  //   const { style = \"normal\" } = props.node\n  //   if (style === \"h1\") {\n  //     return React.createElement(\n  //       style,\n  //       {\n  //         className: `title is-montserrat is-uppercase has-text-black`,\n  //       },\n  //       props.children\n  //     )\n  //   }\n  //   if (style === \"h2\") {\n  //     return React.createElement(\n  //       style,\n  //       {\n  //         className: `title is-montserrat is-uppercase has-text-black`,\n  //       },\n  //       props.children\n  //     )\n  //   }\n  //   if (style === \"blockquote\") {\n  //     return <blockquote>- {props.children}</blockquote>\n  //   }\n  //   // Fall back to default handling\n  //   return PortableText.defaultSerializers.types.block(props)\n  // }\n  // const BlockRenderer = (props) => {\n  //   const { style = \"normal\" } = props.node\n  //   if (/^h\\d/.test(style)) {\n  //     return React.createElement(\n  //       style,\n  //       {\n  //         className: `title is-montserrat is-uppercase is-size-4 is-size-5-mobile`,\n  //       },\n  //       props.children\n  //     )\n  //   }\n  //   // Fall back to default handling\n  //   return PortableText.defaultSerializers.types.block(props)\n  // }\n  // const BlockImageRenderer = (props) => {\n  //   const urlFor = (source) =>\n  //     imageUrlBuilder({\n  //       projectId: process.env.GATSBY_SANITY_ID,\n  //       dataset: process.env.GATSBY_SANITY_DATASET,\n  //     }).image(source)\n  //   return (\n  //     <img\n  //       src={urlFor(props.node.image.asset).maxWidth(400)}\n  //       alt={props.node.alt}\n  //     />\n  //   )\n  // }\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(Hero, {\n      placeholder: heroImage === null || heroImage === void 0 ? void 0 : (_heroImage$metadata = heroImage.metadata) === null || _heroImage$metadata === void 0 ? void 0 : _heroImage$metadata.lqip,\n      image: heroImage === null || heroImage === void 0 ? void 0 : heroImage.url,\n      children: /*#__PURE__*/_jsxDEV(PortableText, {\n        block: heroCard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxW: \"container.xl\",\n      children: /*#__PURE__*/_jsxDEV(Section, {\n        children: /*#__PURE__*/_jsxDEV(VStack, {\n          spacing: 12,\n          children: services.map(service => {\n            var _image$metadata;\n\n            const {\n              _id,\n              slug,\n              image,\n              imageAlt,\n              body\n            } = service;\n            return /*#__PURE__*/_jsxDEV(Flex, {\n              boxShadow: \"lg\",\n              borderRadius: 4,\n              overflow: \"hidden\",\n              children: [/*#__PURE__*/_jsxDEV(Image, {\n                maxW: \"40%\",\n                src: image === null || image === void 0 ? void 0 : image.url,\n                bgImage: image === null || image === void 0 ? void 0 : (_image$metadata = image.metadata) === null || _image$metadata === void 0 ? void 0 : _image$metadata.lqip\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                p: \"3rem\",\n                children: /*#__PURE__*/_jsxDEV(PortableText, {\n                  blocks: body\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 19\n              }, this)]\n            }, _id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(data, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}; // TODO: remove _id in query and return Sanity studio to using single services schema\n\n\nconst servicesPageQuery = groq`\n  *[_type == \"servicesPage\" && _id == \"entrepreneurServicesPage\"]{\n    _id,\n    title,\n    \"heroImage\": heroImage.asset->{\n      metadata,\n      url\n    },\n    heroCard,\n    services[]->{\n      _id,\n      \"slug\": slug.current,\n      \"image\": image.asset->{\n        metadata,\n        url\n      },\n      imageAlt,\n      body\n    }\n  }[0]\n`;\nexport const getStaticProps = async () => {\n  const data = await getClient().fetch(servicesPageQuery);\n  return {\n    props: {\n      data\n    }\n  };\n};\nexport default ForBusiness;","map":{"version":3,"sources":["/home/alexander/github/XanderJL/last-draft/pages/services.js"],"names":["Layout","groq","getClient","Hero","PortableText","Box","Container","Flex","VStack","Section","Image","ForBusiness","data","title","heroImage","heroCard","services","metadata","lqip","url","map","service","_id","slug","image","imageAlt","body","JSON","stringify","servicesPageQuery","getStaticProps","fetch","props"],"mappings":"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","sourcesContent":["import Layout from \"@components/Layout\"\nimport { groq } from \"next-sanity\"\nimport { getClient } from \"@lib/sanity.server\"\nimport Hero from \"@components/Hero\"\nimport { PortableText } from \"@lib/sanity\"\nimport { Box, Container, Flex, VStack } from \"@chakra-ui/layout\"\nimport Section from \"@components/Section\"\nimport { Image } from \"@chakra-ui/image\"\n\nconst ForBusiness = ({ data }) => {\n  const { title, heroImage, heroCard, services } = data\n  // const CardRenderer = (props) => {\n  //   const { style = \"normal\" } = props.node\n\n  //   if (style === \"h1\") {\n  //     return React.createElement(\n  //       style,\n  //       {\n  //         className: `title is-montserrat is-uppercase has-text-black`,\n  //       },\n  //       props.children\n  //     )\n  //   }\n  //   if (style === \"h2\") {\n  //     return React.createElement(\n  //       style,\n  //       {\n  //         className: `title is-montserrat is-uppercase has-text-black`,\n  //       },\n  //       props.children\n  //     )\n  //   }\n\n  //   if (style === \"blockquote\") {\n  //     return <blockquote>- {props.children}</blockquote>\n  //   }\n\n  //   // Fall back to default handling\n  //   return PortableText.defaultSerializers.types.block(props)\n  // }\n\n  // const BlockRenderer = (props) => {\n  //   const { style = \"normal\" } = props.node\n\n  //   if (/^h\\d/.test(style)) {\n  //     return React.createElement(\n  //       style,\n  //       {\n  //         className: `title is-montserrat is-uppercase is-size-4 is-size-5-mobile`,\n  //       },\n  //       props.children\n  //     )\n  //   }\n\n  //   // Fall back to default handling\n  //   return PortableText.defaultSerializers.types.block(props)\n  // }\n\n  // const BlockImageRenderer = (props) => {\n  //   const urlFor = (source) =>\n  //     imageUrlBuilder({\n  //       projectId: process.env.GATSBY_SANITY_ID,\n  //       dataset: process.env.GATSBY_SANITY_DATASET,\n  //     }).image(source)\n  //   return (\n  //     <img\n  //       src={urlFor(props.node.image.asset).maxWidth(400)}\n  //       alt={props.node.alt}\n  //     />\n  //   )\n  // }\n\n  return (\n    <Layout>\n      <Hero placeholder={heroImage?.metadata?.lqip} image={heroImage?.url}>\n        <PortableText block={heroCard} />\n      </Hero>\n      <Container maxW=\"container.xl\">\n        <Section>\n          <VStack spacing={12}>\n            {services.map((service) => {\n              const { _id, slug, image, imageAlt, body } = service\n\n              return (\n                <Flex\n                  key={_id}\n                  boxShadow=\"lg\"\n                  borderRadius={4}\n                  overflow=\"hidden\"\n                >\n                  <Image\n                    maxW=\"40%\"\n                    src={image?.url}\n                    bgImage={image?.metadata?.lqip}\n                  />\n                  <Box p=\"3rem\">\n                    <PortableText blocks={body} />\n                  </Box>\n                </Flex>\n              )\n            })}\n          </VStack>\n        </Section>\n      </Container>\n      <pre>{JSON.stringify(data, null, 2)}</pre>\n    </Layout>\n  )\n}\n\n// TODO: remove _id in query and return Sanity studio to using single services schema\n\nconst servicesPageQuery = groq`\n  *[_type == \"servicesPage\" && _id == \"entrepreneurServicesPage\"]{\n    _id,\n    title,\n    \"heroImage\": heroImage.asset->{\n      metadata,\n      url\n    },\n    heroCard,\n    services[]->{\n      _id,\n      \"slug\": slug.current,\n      \"image\": image.asset->{\n        metadata,\n        url\n      },\n      imageAlt,\n      body\n    }\n  }[0]\n`\n\nexport const getStaticProps = async () => {\n  const data = await getClient().fetch(servicesPageQuery)\n\n  return { props: { data } }\n}\n\nexport default ForBusiness\n"]},"metadata":{},"sourceType":"module"}