{"ast":null,"code":"import _defineProperty from \"/home/alexander/github/XanderJL/last-draft/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/alexander/github/XanderJL/last-draft/pages/_app.js\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport theme from \"../theme\";\nimport * as ga from \"@lib/ga\";\n\nfunction MyApp(_ref) {\n  _s();\n\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n  var router = useRouter();\n  useEffect(function () {\n    var handleRouteChange = function handleRouteChange(url) {\n      ga.pageview(url);\n    }; //When the component is mounted, subscribe to router changes\n    //and log those page views\n\n\n    router.events.on(\"routeChangeComplete\", handleRouteChange); // If the component is unmounted, unsubscribe\n    // from the event with the `off` method\n\n    return function () {\n      router.events.off(\"routeChangeComplete\", handleRouteChange);\n    };\n  }, [router.events]);\n  return /*#__PURE__*/_jsxDEV(ChakraProvider, {\n    theme: theme,\n    children: /*#__PURE__*/_jsxDEV(Component, _objectSpread({}, pageProps), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MyApp, \"vQduR7x+OPXj6PSmJyFnf+hU7bg=\", false, function () {\n  return [useRouter];\n});\n\n_c = MyApp;\nexport default MyApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyApp\");","map":{"version":3,"sources":["/home/alexander/github/XanderJL/last-draft/pages/_app.js"],"names":["useEffect","useRouter","ChakraProvider","theme","ga","MyApp","Component","pageProps","router","handleRouteChange","url","pageview","events","on","off"],"mappings":";;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAO,KAAKC,EAAZ,MAAoB,SAApB;;AAEA,SAASC,KAAT,OAAyC;AAAA;;AAAA,MAAxBC,SAAwB,QAAxBA,SAAwB;AAAA,MAAbC,SAAa,QAAbA,SAAa;AACvC,MAAMC,MAAM,GAAGP,SAAS,EAAxB;AAEAD,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMS,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,GAAD,EAAS;AACjCN,MAAAA,EAAE,CAACO,QAAH,CAAYD,GAAZ;AACD,KAFD,CADc,CAId;AACA;;;AACAF,IAAAA,MAAM,CAACI,MAAP,CAAcC,EAAd,CAAiB,qBAAjB,EAAwCJ,iBAAxC,EANc,CAQd;AACA;;AACA,WAAO,YAAM;AACXD,MAAAA,MAAM,CAACI,MAAP,CAAcE,GAAd,CAAkB,qBAAlB,EAAyCL,iBAAzC;AACD,KAFD;AAGD,GAbQ,EAaN,CAACD,MAAM,CAACI,MAAR,CAbM,CAAT;AAeA,sBACE,QAAC,cAAD;AAAgB,IAAA,KAAK,EAAET,KAAvB;AAAA,2BACE,QAAC,SAAD,oBAAeI,SAAf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAvBQF,K;UACQJ,S;;;KADRI,K;AAyBT,eAAeA,KAAf","sourcesContent":["import { useEffect } from \"react\"\nimport { useRouter } from \"next/router\"\nimport { ChakraProvider } from \"@chakra-ui/react\"\nimport theme from \"../theme\"\nimport * as ga from \"@lib/ga\"\n\nfunction MyApp({ Component, pageProps }) {\n  const router = useRouter()\n\n  useEffect(() => {\n    const handleRouteChange = (url) => {\n      ga.pageview(url)\n    }\n    //When the component is mounted, subscribe to router changes\n    //and log those page views\n    router.events.on(\"routeChangeComplete\", handleRouteChange)\n\n    // If the component is unmounted, unsubscribe\n    // from the event with the `off` method\n    return () => {\n      router.events.off(\"routeChangeComplete\", handleRouteChange)\n    }\n  }, [router.events])\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Component {...pageProps} />\n    </ChakraProvider>\n  )\n}\n\nexport default MyApp\n"]},"metadata":{},"sourceType":"module"}