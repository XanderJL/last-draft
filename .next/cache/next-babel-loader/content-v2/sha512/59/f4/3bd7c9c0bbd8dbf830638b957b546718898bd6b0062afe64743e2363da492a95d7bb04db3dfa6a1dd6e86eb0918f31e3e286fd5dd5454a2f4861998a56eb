{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/alexander/github/XanderJL/last-draft/pages/services.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Layout from \"@components/Layout\";\nimport { groq } from \"next-sanity\";\nimport { getClient } from \"@lib/sanity.server\";\nimport Hero from \"@components/Hero\";\nimport { PortableText, serializers } from \"@lib/sanity\";\nimport { Box, Container, Heading, Flex, VStack, Text } from \"@chakra-ui/react\";\nimport Section from \"@components/Section\";\nimport { Image } from \"@chakra-ui/image\";\n\nconst ForBusiness = ({\n  data\n}) => {\n  var _heroImage$metadata;\n\n  const {\n    title,\n    heroImage,\n    heroCard,\n    services\n  } = data;\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    bg: \"gray.50\",\n    children: [/*#__PURE__*/_jsxDEV(Hero, {\n      placeholder: heroImage === null || heroImage === void 0 ? void 0 : (_heroImage$metadata = heroImage.metadata) === null || _heroImage$metadata === void 0 ? void 0 : _heroImage$metadata.lqip,\n      image: heroImage === null || heroImage === void 0 ? void 0 : heroImage.url,\n      children: /*#__PURE__*/_jsxDEV(PortableText, {\n        block: heroCard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxW: \"container.xl\",\n      children: /*#__PURE__*/_jsxDEV(Section, {\n        children: /*#__PURE__*/_jsxDEV(VStack, {\n          spacing: 12,\n          children: services.map(service => {\n            var _image$metadata;\n\n            const {\n              _id,\n              slug,\n              image,\n              imageAlt,\n              body\n            } = service;\n            return /*#__PURE__*/_jsxDEV(Flex, {\n              direction: {\n                base: \"column\",\n                md: \"row\"\n              },\n              boxShadow: \"lg\",\n              borderRadius: 2,\n              overflow: \"hidden\",\n              bg: \"white\",\n              children: [/*#__PURE__*/_jsxDEV(Image, {\n                maxW: {\n                  base: \"100%\",\n                  md: \"40%\"\n                },\n                maxH: {\n                  base: \"500px\",\n                  md: \"auto\"\n                },\n                src: image === null || image === void 0 ? void 0 : image.url,\n                objectFit: \"cover\",\n                bgImage: image === null || image === void 0 ? void 0 : (_image$metadata = image.metadata) === null || _image$metadata === void 0 ? void 0 : _image$metadata.lqip,\n                bgSize: \"cover\",\n                bgRepeat: \"no-repeat\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 33,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                p: \"3rem\",\n                children: /*#__PURE__*/_jsxDEV(PortableText, {\n                  blocks: body,\n                  serializers: _objectSpread(_objectSpread({}, serializers), {}, {\n                    types: _objectSpread(_objectSpread({}, serializers.types), {}, {\n                      block: props => {\n                        const {\n                          style = \"normal\"\n                        } = props.node;\n\n                        switch (style) {\n                          case \"h1\":\n                            return /*#__PURE__*/_jsxDEV(Heading, {\n                              as: \"h1\",\n                              size: \"lg\",\n                              children: props.children\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 55,\n                              columnNumber: 35\n                            }, this);\n\n                          case \"h2\":\n                            return /*#__PURE__*/_jsxDEV(Heading, {\n                              as: \"h2\",\n                              size: \"md\",\n                              children: props.children\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 61,\n                              columnNumber: 35\n                            }, this);\n\n                          default:\n                            return /*#__PURE__*/_jsxDEV(Text, {\n                              pb: \"1rem\",\n                              children: props.children\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 66,\n                              columnNumber: 40\n                            }, this);\n                        }\n                      }\n                    })\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 43,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 42,\n                columnNumber: 19\n              }, this)]\n            }, _id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 25,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n}; // TODO: remove _id in query and return Sanity studio to using single services schema\n\n\nconst servicesPageQuery = groq`\n  *[_type == \"servicesPage\" && _id == \"entrepreneurServicesPage\"]{\n    _id,\n    title,\n    \"heroImage\": heroImage.asset->{\n      metadata,\n      url\n    },\n    heroCard,\n    services[]->{\n      _id,\n      \"slug\": slug.current,\n      \"image\": image.asset->{\n        metadata,\n        url\n      },\n      imageAlt,\n      body\n    }\n  }[0]\n`;\nexport const getStaticProps = async () => {\n  const data = await getClient().fetch(servicesPageQuery);\n  return {\n    props: {\n      data\n    }\n  };\n};\nexport default ForBusiness;","map":{"version":3,"sources":["/home/alexander/github/XanderJL/last-draft/pages/services.js"],"names":["Layout","groq","getClient","Hero","PortableText","serializers","Box","Container","Heading","Flex","VStack","Text","Section","Image","ForBusiness","data","title","heroImage","heroCard","services","metadata","lqip","url","map","service","_id","slug","image","imageAlt","body","base","md","types","block","props","style","node","children","servicesPageQuery","getStaticProps","fetch"],"mappings":"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","sourcesContent":["import Layout from \"@components/Layout\"\nimport { groq } from \"next-sanity\"\nimport { getClient } from \"@lib/sanity.server\"\nimport Hero from \"@components/Hero\"\nimport { PortableText, serializers } from \"@lib/sanity\"\nimport { Box, Container, Heading, Flex, VStack, Text } from \"@chakra-ui/react\"\nimport Section from \"@components/Section\"\nimport { Image } from \"@chakra-ui/image\"\n\nconst ForBusiness = ({ data }) => {\n  const { title, heroImage, heroCard, services } = data\n\n  return (\n    <Layout bg=\"gray.50\">\n      <Hero placeholder={heroImage?.metadata?.lqip} image={heroImage?.url}>\n        <PortableText block={heroCard} />\n      </Hero>\n      <Container maxW=\"container.xl\">\n        <Section>\n          <VStack spacing={12}>\n            {services.map((service) => {\n              const { _id, slug, image, imageAlt, body } = service\n\n              return (\n                <Flex\n                  key={_id}\n                  direction={{ base: \"column\", md: \"row\" }}\n                  boxShadow=\"lg\"\n                  borderRadius={2}\n                  overflow=\"hidden\"\n                  bg=\"white\"\n                >\n                  <Image\n                    maxW={{ base: \"100%\", md: \"40%\" }}\n                    maxH={{ base: \"500px\", md: \"auto\" }}\n                    src={image?.url}\n                    objectFit=\"cover\"\n                    bgImage={image?.metadata?.lqip}\n                    bgSize=\"cover\"\n                    bgRepeat=\"no-repeat\"\n                  />\n                  <Box p=\"3rem\">\n                    <PortableText\n                      blocks={body}\n                      serializers={{\n                        ...serializers,\n                        types: {\n                          ...serializers.types,\n                          block: (props) => {\n                            const { style = \"normal\" } = props.node\n\n                            switch (style) {\n                              case \"h1\":\n                                return (\n                                  <Heading as=\"h1\" size=\"lg\">\n                                    {props.children}\n                                  </Heading>\n                                )\n                              case \"h2\":\n                                return (\n                                  <Heading as=\"h2\" size=\"md\">\n                                    {props.children}\n                                  </Heading>\n                                )\n                              default:\n                                return <Text pb=\"1rem\">{props.children}</Text>\n                            }\n                          },\n                        },\n                      }}\n                    />\n                  </Box>\n                </Flex>\n              )\n            })}\n          </VStack>\n        </Section>\n      </Container>\n    </Layout>\n  )\n}\n\n// TODO: remove _id in query and return Sanity studio to using single services schema\n\nconst servicesPageQuery = groq`\n  *[_type == \"servicesPage\" && _id == \"entrepreneurServicesPage\"]{\n    _id,\n    title,\n    \"heroImage\": heroImage.asset->{\n      metadata,\n      url\n    },\n    heroCard,\n    services[]->{\n      _id,\n      \"slug\": slug.current,\n      \"image\": image.asset->{\n        metadata,\n        url\n      },\n      imageAlt,\n      body\n    }\n  }[0]\n`\n\nexport const getStaticProps = async () => {\n  const data = await getClient().fetch(servicesPageQuery)\n\n  return { props: { data } }\n}\n\nexport default ForBusiness\n"]},"metadata":{},"sourceType":"module"}