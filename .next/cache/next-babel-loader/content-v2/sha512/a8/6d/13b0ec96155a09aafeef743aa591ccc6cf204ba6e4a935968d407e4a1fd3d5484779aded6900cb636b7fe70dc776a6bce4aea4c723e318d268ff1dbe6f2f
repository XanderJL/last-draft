{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/alexander/github/XanderJL/last-draft/pages/stories/index.js\";\nimport { Box, Container, Text } from \"@chakra-ui/react\";\nimport { groq } from \"next-sanity\";\nimport { getClient } from \"@lib/sanity/sanity.server\";\nimport Layout from \"@components/Layout\";\nimport Hero from \"@components/Hero\";\nimport BlogTabs from \"@components/BlogTabs\";\nimport { PortableText } from \"@lib/sanity\";\n\nconst Stories = ({\n  blogData,\n  recentPostData,\n  categoryData\n}) => {\n  var _heroImage$metadata;\n\n  console.log({\n    recentPostData\n  });\n  const {\n    heroImage,\n    pubBody\n  } = blogData;\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(Hero, {\n      placeholder: heroImage === null || heroImage === void 0 ? void 0 : (_heroImage$metadata = heroImage.metadata) === null || _heroImage$metadata === void 0 ? void 0 : _heroImage$metadata.lqip,\n      image: heroImage === null || heroImage === void 0 ? void 0 : heroImage.url,\n      minH: \"36em\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxW: \"container.lg\",\n      children: [/*#__PURE__*/_jsxDEV(BlogTabs, {\n        categories: categoryData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PortableText, {\n        blocks: pubBody\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n\nconst blogQuery = groq`\n*[_type == \"blog\"]{\n  title,\n  \"slug\": slug.current,\n  \"heroImage\": heroImage.asset->{\n    metadata,\n    url\n  },\n  \"pubBody\": publication.body,\n  featuredPosts[]->{\n    _id,\n    title,\n    \"slug\": slug.current,\n    category->{\n      \"slug\": slug.current,\n      title\n    },\n    body,\n    \"mainImage\": mainImage.asset->{\n      metadata,\n      url\n    }\n  }\n}[0]\n`;\nconst recentPostsQuery = groq`\n  *[_type == \"post\"] | order(publishedAt desc)[0..2]\n`;\nconst categoriesQuery = groq`\n  *[_type == \"category\" && !defined(parentCategory)]{\n    _id,\n    title,\n    \"slug\": slug.current,\n    description,\n    \"posts\": *[_type == \"post\" && references(^._id)] | order(publishedAt desc) {\n      _id,\n      publishedAt,\n      \"slug\": slug.current,\n      title,\n      \"mainImage\": mainImage.asset->{\n        metadata,\n        url\n      },\n      previewCopy,\n      body,\n      category->{\n        \"slug\": slug.current\n      },\n      parentCategory->{\n        \"slug\": slug.current\n      }\n    }[0..2]\n  }\n`;\nconst featuredPostsQuery = groq`\n  *[_type == \"post\"]{}\n`;\nexport const getStaticProps = async () => {\n  const blogData = await getClient().fetch(blogQuery);\n  const recentPostData = await getClient().fetch(recentPostsQuery);\n  const categoryData = await getClient().fetch(categoriesQuery);\n  return {\n    props: {\n      blogData,\n      recentPostData,\n      categoryData\n    }\n  };\n};\nexport default Stories;","map":{"version":3,"sources":["/home/alexander/github/XanderJL/last-draft/pages/stories/index.js"],"names":["Box","Container","Text","groq","getClient","Layout","Hero","BlogTabs","PortableText","Stories","blogData","recentPostData","categoryData","console","log","heroImage","pubBody","metadata","lqip","url","blogQuery","recentPostsQuery","categoriesQuery","featuredPostsQuery","getStaticProps","fetch","props"],"mappings":";;AAAA,SAASA,GAAT,EAAcC,SAAd,EAAyBC,IAAzB,QAAqC,kBAArC;AACA,SAASC,IAAT,QAAqB,aAArB;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,SAASC,YAAT,QAA6B,aAA7B;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,cAAZ;AAA4BC,EAAAA;AAA5B,CAAD,KAAgD;AAAA;;AAC9DC,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEH,IAAAA;AAAF,GAAZ;AACA,QAAM;AAAEI,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAAyBN,QAA/B;AACA,sBACE,QAAC,MAAD;AAAA,4BACE,QAAC,IAAD;AACE,MAAA,WAAW,EAAEK,SAAF,aAAEA,SAAF,8CAAEA,SAAS,CAAEE,QAAb,wDAAE,oBAAqBC,IADpC;AAEE,MAAA,KAAK,EAAEH,SAAF,aAAEA,SAAF,uBAAEA,SAAS,CAAEI,GAFpB;AAGE,MAAA,IAAI,EAAC;AAHP;AAAA;AAAA;AAAA;AAAA,YADF,eAME,QAAC,SAAD;AAAW,MAAA,IAAI,EAAC,cAAhB;AAAA,8BACE,QAAC,QAAD;AAAU,QAAA,UAAU,EAAEP;AAAtB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,YAAD;AAAc,QAAA,MAAM,EAAEI;AAAtB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0JD,CA7JD;;AA+JA,MAAMI,SAAS,GAAGjB,IAAK;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAxBA;AA0BA,MAAMkB,gBAAgB,GAAGlB,IAAK;AAC9B;AACA,CAFA;AAIA,MAAMmB,eAAe,GAAGnB,IAAK;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAzBA;AA2BA,MAAMoB,kBAAkB,GAAGpB,IAAK;AAChC;AACA,CAFA;AAIA,OAAO,MAAMqB,cAAc,GAAG,YAAY;AACxC,QAAMd,QAAQ,GAAG,MAAMN,SAAS,GAAGqB,KAAZ,CAAkBL,SAAlB,CAAvB;AACA,QAAMT,cAAc,GAAG,MAAMP,SAAS,GAAGqB,KAAZ,CAAkBJ,gBAAlB,CAA7B;AACA,QAAMT,YAAY,GAAG,MAAMR,SAAS,GAAGqB,KAAZ,CAAkBH,eAAlB,CAA3B;AAEA,SAAO;AAAEI,IAAAA,KAAK,EAAE;AAAEhB,MAAAA,QAAF;AAAYC,MAAAA,cAAZ;AAA4BC,MAAAA;AAA5B;AAAT,GAAP;AACD,CANM;AAQP,eAAeH,OAAf","sourcesContent":["import { Box, Container, Text } from \"@chakra-ui/react\"\nimport { groq } from \"next-sanity\"\nimport { getClient } from \"@lib/sanity/sanity.server\"\nimport Layout from \"@components/Layout\"\nimport Hero from \"@components/Hero\"\nimport BlogTabs from \"@components/BlogTabs\"\nimport { PortableText } from \"@lib/sanity\"\n\nconst Stories = ({ blogData, recentPostData, categoryData }) => {\n  console.log({ recentPostData })\n  const { heroImage, pubBody } = blogData\n  return (\n    <Layout>\n      <Hero\n        placeholder={heroImage?.metadata?.lqip}\n        image={heroImage?.url}\n        minH=\"36em\"\n      />\n      <Container maxW=\"container.lg\">\n        <BlogTabs categories={categoryData} />\n        <PortableText blocks={pubBody} />\n      </Container>\n      {/* <Hero />\n      <Container maxW=\"container.xl\">\n        <BlogTabs />\n        <Box\n          as=\"section\"\n          p={{ base: \"1.25rem\", md: \"2rem 1.25rem 3rem 1.25rem\" }}\n        >\n          <Box>\n            <PortableText blocks={pubBody} />\n          </Box>\n        </Box>\n        <section id=\"recent\" className=\"section-category\">\n          <h2\n            className=\"title is-size-3-desktop is-size-4-mobile is-montserrat is-uppercase has-text-black\"\n            style={{ marginBottom: \"0\" }}\n          >\n            Recent\n          </h2>\n          <hr style={{ margin: \"0.75rem 0\" }} />\n          <div className=\"wrapper-post\" style={{ padding: \"2rem 0\" }}>\n            {latestPosts.edges.map(({ node: post }) => {\n              const {\n                id,\n                title,\n                mainImage,\n                _rawBody,\n                previewCopy,\n                category,\n                slug,\n              } = post\n              const image = mainImage.asset\n              const link = category.parentCategory\n                ? `/stories/${category.parentCategory.slug.current}/${category.slug.current}/${slug.current}`\n                : `/stories/${category.slug.current}/${slug.current}`\n              return (\n                <PostCard key={id} title={title} image={image} link={link}>\n                  {previewCopy\n                    ? previewCopy\n                    : toPlainText(_rawBody).slice(0, 159) + \"...\"}\n                </PostCard>\n              )\n            })}\n          </div>\n        </section>\n        <section id=\"featured\" className=\"section\">\n          <h2\n            className=\"title is-size-3-desktop is-size-4-mobile is-montserrat is-uppercase has-text-black\"\n            style={{ marginBottom: \"0\" }}\n          >\n            Featured\n          </h2>\n          <hr style={{ margin: \"0.75rem 0\" }} />\n          <div className=\"wrapper-post\" style={{ padding: \"2rem 0\" }}>\n            {featuredPosts.featuredPosts.map((post) => {\n              const {\n                id,\n                title,\n                mainImage,\n                _rawBody,\n                previewCopy,\n                category,\n                slug,\n              } = post\n              const image = mainImage.asset\n              const link = category.parentCategory\n                ? `/stories/${category.parentCategory.slug.current}/${category.slug.current}/${slug.current}`\n                : `/stories/${category.slug.current}/${slug.current}`\n              return (\n                <PostCard\n                  key={id}\n                  title={title}\n                  image={image}\n                  link={link}\n                  cardStyle={{ maxWidth: \"420px\" }}\n                >\n                  {previewCopy\n                    ? previewCopy\n                    : toPlainText(_rawBody).slice(0, 159) + \"...\"}\n                </PostCard>\n              )\n            })}\n          </div>\n        </section>\n        {categories.map((category) => {\n          const { id, slug, title, description } = category\n          const link = `/stories/${slug.current}`\n\n          return (\n            <section key={id} id={slug.current} className=\"section-category\">\n              <Link to={\"/stories/\" + slug.current}>\n                <h2 className=\"title is-size-2-desktop is-size-4-mobile is-montserrat is-uppercase has-text-black\">\n                  {title}\n                </h2>\n                <hr />\n              </Link>\n              {description && <Text maxW=\"75ch\">{description}</Text>}\n              <div className=\"wrapper-post\" style={{ padding: \"2rem 0\" }}>\n                {posts.edges\n                  .filter(\n                    ({ node: post }) =>\n                      post.category.slug.current === slug.current\n                  )\n                  .slice(0, 3)\n                  .map(({ node: post }) => {\n                    const {\n                      id,\n                      title,\n                      mainImage,\n                      _rawBody,\n                      previewCopy,\n                      category,\n                      slug,\n                    } = post\n                    const image = mainImage.asset\n                    const link = `/stories/${category.slug.current}/${slug.current}`\n                    return (\n                      <PostCard\n                        key={id}\n                        title={title}\n                        image={image}\n                        link={link}\n                        cardStyle={{ maxWidth: \"420px\" }}\n                      >\n                        {previewCopy\n                          ? previewCopy\n                          : toPlainText(_rawBody).slice(0, 159) + \"...\"}\n                      </PostCard>\n                    )\n                  })}\n              </div>\n              <Link to={link} className=\"button is-size-5\">\n                More Articles &rsaquo;\n              </Link>\n            </section>\n          )\n        })}\n        <section className=\"section\">\n          <SubmitForm />\n        </section>\n      </Container>\n      <OptInModal /> */}\n    </Layout>\n  )\n}\n\nconst blogQuery = groq`\n*[_type == \"blog\"]{\n  title,\n  \"slug\": slug.current,\n  \"heroImage\": heroImage.asset->{\n    metadata,\n    url\n  },\n  \"pubBody\": publication.body,\n  featuredPosts[]->{\n    _id,\n    title,\n    \"slug\": slug.current,\n    category->{\n      \"slug\": slug.current,\n      title\n    },\n    body,\n    \"mainImage\": mainImage.asset->{\n      metadata,\n      url\n    }\n  }\n}[0]\n`\n\nconst recentPostsQuery = groq`\n  *[_type == \"post\"] | order(publishedAt desc)[0..2]\n`\n\nconst categoriesQuery = groq`\n  *[_type == \"category\" && !defined(parentCategory)]{\n    _id,\n    title,\n    \"slug\": slug.current,\n    description,\n    \"posts\": *[_type == \"post\" && references(^._id)] | order(publishedAt desc) {\n      _id,\n      publishedAt,\n      \"slug\": slug.current,\n      title,\n      \"mainImage\": mainImage.asset->{\n        metadata,\n        url\n      },\n      previewCopy,\n      body,\n      category->{\n        \"slug\": slug.current\n      },\n      parentCategory->{\n        \"slug\": slug.current\n      }\n    }[0..2]\n  }\n`\n\nconst featuredPostsQuery = groq`\n  *[_type == \"post\"]{}\n`\n\nexport const getStaticProps = async () => {\n  const blogData = await getClient().fetch(blogQuery)\n  const recentPostData = await getClient().fetch(recentPostsQuery)\n  const categoryData = await getClient().fetch(categoriesQuery)\n\n  return { props: { blogData, recentPostData, categoryData } }\n}\n\nexport default Stories\n"]},"metadata":{},"sourceType":"module"}