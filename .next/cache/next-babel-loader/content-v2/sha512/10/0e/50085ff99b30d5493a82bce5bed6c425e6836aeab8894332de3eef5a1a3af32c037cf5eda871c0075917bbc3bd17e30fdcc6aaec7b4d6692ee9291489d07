{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/alexander/github/XanderJL/last-draft/components/Serializers/index.js\",\n    _this = this;\n\nimport * as React from \"react\";\nimport { Box } from \"@chakra-ui/react\";\nimport InstagramEmbed from \"react-instagram-embed\";\nimport { Tweet } from \"react-twitter-widgets\";\nimport ReactPlayer from \"react-player\";\nimport urlBuilder from \"@sanity/image-url\";\nimport imageUrlBuilder from \"@sanity/image-url\";\nimport PortableText from \"@sanity/block-content-to-react\";\nimport Iframe from \"react-iframe\";\nvar Serializers = {\n  types: {\n    hr: function hr(_ref) {\n      var node = _ref.node;\n\n      if (node.style === \"elipses\") {\n        return /*#__PURE__*/_jsxDEV(\"hr\", {\n          className: \"elipses-hr\",\n          style: {\n            margin: \"3rem auto\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 16\n        }, _this);\n      } else if (node.style === \"solid\") {\n        return /*#__PURE__*/_jsxDEV(\"hr\", {\n          className: \"solid-hr\",\n          style: {\n            margin: \"3rem auto\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 16\n        }, _this);\n      }\n    },\n    blockImage: function blockImage(_ref2) {\n      var node = _ref2.node;\n      var image = node.image,\n          alt = node.alt,\n          caption = node.caption;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: embedStyle,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"image\",\n          src: urlFor(image),\n          alt: alt,\n          style: {\n            margin: \"1rem auto\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content has-text-grey is-italic\",\n          children: caption && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: caption\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 25\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, _this);\n    },\n    embed: function embed(_ref3) {\n      var node = _ref3.node;\n      var url = node.url; // Instagram embeds\n\n      if (rx(\"instagram\").test(url)) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: embedStyle,\n          children: /*#__PURE__*/_jsxDEV(InstagramEmbed, {\n            url: url,\n            hideCaption: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, _this);\n      } // Youtube embeds\n\n\n      if (rx(\"youtube\").test(url)) {\n        return /*#__PURE__*/_jsxDEV(ReactPlayer, {\n          url: url,\n          controls: true,\n          width: \"100%\",\n          style: embedStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, _this);\n      } // Twitter embeds\n\n\n      if (rx(\"twitter\").test(url)) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: embedStyle,\n          children: /*#__PURE__*/_jsxDEV(Tweet, {\n            url: url\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, _this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Missing url\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 14\n      }, _this);\n    },\n    podBeanEmbed: function podBeanEmbed(_ref4) {\n      var node = _ref4.node;\n      var url = node.url,\n          title = node.title;\n      return /*#__PURE__*/_jsxDEV(Box, {\n        pb: \"1rem\",\n        children: /*#__PURE__*/_jsxDEV(Iframe, {\n          url: url,\n          title: title,\n          width: \"100%\",\n          height: \"400\",\n          scrolling: \"no\",\n          style: \"border:none;\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, _this);\n    }\n  }\n};\nvar embedStyle = {\n  margin: \"3.5rem auto\"\n}; // URL builder for images\n\nvar urlFor = function urlFor(src) {\n  return urlBuilder({\n    projectId: process.env.GATSBY_SANITY_ID,\n    dataset: process.env.GATSBY_SANITY_DATASET\n  }).image(src);\n};\n\nvar rx = function rx(str) {\n  var regex = new RegExp(\"^(?:https?://)?(?:[^@/\\n]+@)?(?:www.)?\".concat(str), \"ig\");\n  return regex;\n};\n\nexport var CardRenderer = function CardRenderer(props) {\n  var _props$node$style = props.node.style,\n      style = _props$node$style === void 0 ? \"normal\" : _props$node$style;\n\n  if (style === \"h1\") {\n    return /*#__PURE__*/React.createElement(style, {\n      className: \"title is-montserrat is-uppercase has-text-black\"\n    }, props.children);\n  }\n\n  if (style === \"h2\") {\n    return /*#__PURE__*/React.createElement(style, {\n      className: \"title is-montserrat is-uppercase has-text-black\"\n    }, props.children);\n  }\n\n  if (style === \"blockquote\") {\n    return /*#__PURE__*/_jsxDEV(\"blockquote\", {\n      children: [\"- \", props.children]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 12\n    }, _this);\n  } // Fall back to default handling\n\n\n  return PortableText.defaultSerializers.types.block(props);\n};\n_c = CardRenderer;\nexport var BlockImageRenderer = function BlockImageRenderer(props) {\n  var urlFor = function urlFor(source) {\n    return imageUrlBuilder({\n      projectId: process.env.GATSBY_SANITY_ID,\n      dataset: process.env.GATSBY_SANITY_DATASET\n    }).image(source);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"img\", {\n    src: urlFor(props.node.image.asset).maxWidth(400),\n    alt: props.node.alt\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, _this);\n};\n_c2 = BlockImageRenderer;\nexport var BlockRenderer = function BlockRenderer(props) {\n  var _props$node$style2 = props.node.style,\n      style = _props$node$style2 === void 0 ? \"normal\" : _props$node$style2;\n\n  if (/^h\\d/.test(style)) {\n    return /*#__PURE__*/React.createElement(style, {\n      className: \"title is-montserrat is-uppercase is-size-4 is-size-5-mobile\"\n    }, props.children);\n  } // Fall back to default handling\n\n\n  return PortableText.defaultSerializers.types.block(props);\n};\n_c3 = BlockRenderer;\nexport default Serializers;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"CardRenderer\");\n$RefreshReg$(_c2, \"BlockImageRenderer\");\n$RefreshReg$(_c3, \"BlockRenderer\");","map":{"version":3,"sources":["/home/alexander/github/XanderJL/last-draft/components/Serializers/index.js"],"names":["React","Box","InstagramEmbed","Tweet","ReactPlayer","urlBuilder","imageUrlBuilder","PortableText","Iframe","Serializers","types","hr","node","style","margin","blockImage","image","alt","caption","embedStyle","urlFor","embed","url","rx","test","podBeanEmbed","title","src","projectId","process","env","GATSBY_SANITY_ID","dataset","GATSBY_SANITY_DATASET","str","regex","RegExp","CardRenderer","props","createElement","className","children","defaultSerializers","block","BlockImageRenderer","source","asset","maxWidth","BlockRenderer"],"mappings":"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","sourcesContent":["import * as React from \"react\"\nimport { Box } from \"@chakra-ui/react\"\nimport InstagramEmbed from \"react-instagram-embed\"\nimport { Tweet } from \"react-twitter-widgets\"\nimport ReactPlayer from \"react-player\"\nimport urlBuilder from \"@sanity/image-url\"\nimport imageUrlBuilder from \"@sanity/image-url\"\nimport PortableText from \"@sanity/block-content-to-react\"\nimport Iframe from \"react-iframe\"\n\nconst Serializers = {\n  types: {\n    hr: ({ node }) => {\n      if (node.style === \"elipses\") {\n        return <hr className=\"elipses-hr\" style={{ margin: \"3rem auto\" }} />\n      } else if (node.style === \"solid\") {\n        return <hr className=\"solid-hr\" style={{ margin: \"3rem auto\" }} />\n      }\n    },\n    blockImage: ({ node }) => {\n      const { image, alt, caption } = node\n      return (\n        <div style={embedStyle}>\n          <img\n            className=\"image\"\n            src={urlFor(image)}\n            alt={alt}\n            style={{ margin: \"1rem auto\" }}\n          />\n          <div className=\"content has-text-grey is-italic\">\n            {caption && <span>{caption}</span>}\n          </div>\n        </div>\n      )\n    },\n    embed: ({ node }) => {\n      const { url } = node\n\n      // Instagram embeds\n      if (rx(\"instagram\").test(url)) {\n        return (\n          <div style={embedStyle}>\n            <InstagramEmbed url={url} hideCaption={true} />\n          </div>\n        )\n      }\n\n      // Youtube embeds\n      if (rx(\"youtube\").test(url)) {\n        return (\n          <ReactPlayer\n            url={url}\n            controls={true}\n            width={\"100%\"}\n            style={embedStyle}\n          />\n        )\n      }\n\n      // Twitter embeds\n      if (rx(\"twitter\").test(url)) {\n        return (\n          <div style={embedStyle}>\n            <Tweet url={url} />\n          </div>\n        )\n      }\n\n      return <span>Missing url</span>\n    },\n    podBeanEmbed: ({ node }) => {\n      const { url, title } = node\n      return (\n        <Box pb=\"1rem\">\n          <Iframe\n            url={url}\n            title={title}\n            width=\"100%\"\n            height=\"400\"\n            scrolling=\"no\"\n            style=\"border:none;\"\n          />\n        </Box>\n      )\n    },\n  },\n}\n\nconst embedStyle = {\n  margin: \"3.5rem auto\",\n}\n\n// URL builder for images\nconst urlFor = (src) =>\n  urlBuilder({\n    projectId: process.env.GATSBY_SANITY_ID,\n    dataset: process.env.GATSBY_SANITY_DATASET,\n  }).image(src)\n\nconst rx = (str) => {\n  const regex = new RegExp(\n    `^(?:https?:\\/\\/)?(?:[^@\\/\\n]+@)?(?:www\\.)?${str}`,\n    \"ig\"\n  )\n  return regex\n}\n\nexport const CardRenderer = (props) => {\n  const { style = \"normal\" } = props.node\n\n  if (style === \"h1\") {\n    return React.createElement(\n      style,\n      {\n        className: `title is-montserrat is-uppercase has-text-black`,\n      },\n      props.children\n    )\n  }\n  if (style === \"h2\") {\n    return React.createElement(\n      style,\n      {\n        className: `title is-montserrat is-uppercase has-text-black`,\n      },\n      props.children\n    )\n  }\n\n  if (style === \"blockquote\") {\n    return <blockquote>- {props.children}</blockquote>\n  }\n\n  // Fall back to default handling\n  return PortableText.defaultSerializers.types.block(props)\n}\nexport const BlockImageRenderer = (props) => {\n  const urlFor = (source) =>\n    imageUrlBuilder({\n      projectId: process.env.GATSBY_SANITY_ID,\n      dataset: process.env.GATSBY_SANITY_DATASET,\n    }).image(source)\n  return (\n    <img\n      src={urlFor(props.node.image.asset).maxWidth(400)}\n      alt={props.node.alt}\n    />\n  )\n}\n\nexport const BlockRenderer = (props) => {\n  const { style = \"normal\" } = props.node\n\n  if (/^h\\d/.test(style)) {\n    return React.createElement(\n      style,\n      {\n        className: `title is-montserrat is-uppercase is-size-4 is-size-5-mobile`,\n      },\n      props.children\n    )\n  }\n\n  // Fall back to default handling\n  return PortableText.defaultSerializers.types.block(props)\n}\n\nexport default Serializers\n"]},"metadata":{},"sourceType":"module"}