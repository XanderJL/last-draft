{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/alexander/github/XanderJL/last-draft/pages/stories/[category]/[post].js\",\n    _this = this;\n\nimport { Heading } from \"@chakra-ui/layout\";\nimport Layout from \"@components/Layout\";\n\nvar Post = function Post(_ref) {\n  var postData = _ref.postData;\n  var title = postData.title,\n      author = postData.author;\n  console.log({\n    author: author\n  });\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(Heading, {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, _this);\n};\n\n_c = Post;\nexport var __N_SSG = true;\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/home/alexander/github/XanderJL/last-draft/pages/stories/[category]/[post].js"],"names":["Heading","Layout","Post","postData","title","author","console","log"],"mappings":";;;;;AAAA,SAASA,OAAT,QAAwB,mBAAxB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;;AAIA,IAAMC,IAAI,GAAG,SAAPA,IAAO,OAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AAAA,MACrBC,KADqB,GACHD,QADG,CACrBC,KADqB;AAAA,MACdC,MADc,GACHF,QADG,CACdE,MADc;AAE7BC,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEF,IAAAA,MAAM,EAANA;AAAF,GAAZ;AACA,sBACE,QAAC,MAAD;AAAA,2BACE,QAAC,OAAD;AAAA,gBAAUD;AAAV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAKD,CARD;;KAAMF,I;;AAoDN,eAAeA,IAAf","sourcesContent":["import { Heading } from \"@chakra-ui/layout\"\nimport Layout from \"@components/Layout\"\nimport { getClient } from \"@lib/sanity/sanity.server\"\nimport { groq } from \"next-sanity\"\n\nconst Post = ({ postData }) => {\n  const { title, author } = postData\n  console.log({ author })\n  return (\n    <Layout>\n      <Heading>{title}</Heading>\n    </Layout>\n  )\n}\n\nconst postQuery = groq`\n  *[_type == \"post\" && slug.current == $post]{\n    _id,\n    title,\n    author->,\n    tags,\n    title,\n    publishedAt,\n    \"mainImage\": mainImage.asset->{\n      metadata,\n      url\n    },\n    mainAlt,\n    mainCaption,\n    body\n  }[0]\n`\n\nexport const getStaticPaths = async () => {\n  const posts = await getClient().fetch(groq`\n    *[_type == \"post\"]{\n      \"slug\": slug.current,\n      category->{\n        \"slug\": slug.current\n      }\n    }\n  `)\n  const paths = posts.map((post) => ({\n    params: { category: post.category.slug, post: post.slug },\n  }))\n\n  return { paths, fallback: false }\n}\n\nexport const getStaticProps = async ({ params }) => {\n  const postData = await getClient().fetch(postQuery, {\n    post: params.post,\n  })\n\n  return { props: { postData } }\n}\n\nexport default Post\n"]},"metadata":{},"sourceType":"module"}